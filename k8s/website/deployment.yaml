apiVersion: v1
kind: Namespace
metadata:
  name: gke-stats
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: stats-backend-sa
  namespace: gke-stats
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cluster-stats-reader
rules:
- apiGroups: [""]
  resources: ["nodes", "pods", "services", "namespaces"]
  verbs: ["get", "list"]
- apiGroups: ["apps"]
  resources: ["deployments", "daemonsets", "replicasets", "statefulsets"]
  verbs: ["get", "list"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["nodes", "pods"]
  verbs: ["get", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: stats-backend-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-stats-reader
subjects:
- kind: ServiceAccount
  name: stats-backend-sa
  namespace: gke-stats
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stats-backend
  namespace: gke-stats
spec:
  replicas: 2
  selector:
    matchLabels:
      app: stats-backend
  template:
    metadata:
      labels:
        app: stats-backend
    spec:
      serviceAccountName: stats-backend-sa
      containers:
      - name: backend
        image: gcr.io/simplifymycloud-dev/gke-stats-backend:latest
        ports:
        - containerPort: 3000
        env:
        - name: CLUSTER_NAME
          value: "gke-rancher-testdrive"
        - name: PORT
          value: "3000"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: gke-stats
spec:
  selector:
    app: stats-backend
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: stats-frontend
  namespace: gke-stats
spec:
  replicas: 2
  selector:
    matchLabels:
      app: stats-frontend
  template:
    metadata:
      labels:
        app: stats-frontend
    spec:
      containers:
      - name: frontend
        image: gcr.io/simplifymycloud-dev/gke-stats-frontend:latest
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: gke-stats
  annotations:
    cloud.google.com/neg: '{"ingress": true}'
spec:
  selector:
    app: stats-frontend
  ports:
  - port: 80
    targetPort: 80
  type: LoadBalancer
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: stats-ingress
  namespace: gke-stats
  annotations:
    kubernetes.io/ingress.class: "gce"
    kubernetes.io/ingress.global-static-ip-name: "gke-stats-ip"
    networking.gke.io/managed-certificates: "gke-stats-cert"
spec:
  rules:
  - http:
      paths:
      - path: /*
        pathType: ImplementationSpecific
        backend:
          service:
            name: frontend-service
            port:
              number: 80
---
apiVersion: networking.gke.io/v1
kind: ManagedCertificate
metadata:
  name: gke-stats-cert
  namespace: gke-stats
spec:
  domains:
    - gke-demo.example.com